name: Weekly Secrets Rotation

on:
  # Executar toda segunda-feira às 8h UTC (5h BRT)
  schedule:
    - cron: '0 8 * * 1'
  
  # Permitir execução manual
  workflow_dispatch:
    inputs:
      secrets_to_sync:
        description: 'Secrets to sync (comma-separated: render,supabase,mailgun,all)'
        required: false
        default: 'all'

env:
  VAULT: "Intellicore Ops"

jobs:
  rotate-secrets:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
      
      - name: Sync Render API Key
        if: contains(github.event.inputs.secrets_to_sync || 'all', 'render') || contains(github.event.inputs.secrets_to_sync || 'all', 'all')
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_PAT_SECRETS_WRITE }}
        run: |
          chmod +x ./scripts/sync_1password_item_to_github.sh
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "Automated secrets Render API" \
            --field notesPlain \
            --secret-name RENDER_API_KEY \
            --repo ${{ github.repository }} \
            --validate-url https://api.render.com/v1/services
      
      - name: Sync Supabase Service Role Key
        if: contains(github.event.inputs.secrets_to_sync || 'all', 'supabase') || contains(github.event.inputs.secrets_to_sync || 'all', 'all')
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_PAT_SECRETS_WRITE }}
        run: |
          chmod +x ./scripts/sync_1password_item_to_github.sh
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "${{ vars.OP_ITEM_SUPABASE_SERVICE_ROLE || 'GITHUB - SUPABASE_SERVICE_ROLE_KEY' }}" \
            --field notesPlain \
            --secret-name SUPABASE_SERVICE_ROLE_KEY \
            --repo ${{ github.repository }}

      - name: Sync Supabase URL
        if: contains(github.event.inputs.secrets_to_sync || 'all', 'supabase') || contains(github.event.inputs.secrets_to_sync || 'all', 'all')
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_PAT_SECRETS_WRITE }}
        run: |
          chmod +x ./scripts/sync_1password_item_to_github.sh
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "${{ vars.OP_ITEM_SUPABASE_URL || 'GITHUB - SUPABASE_URL' }}" \
            --field notesPlain \
            --secret-name SUPABASE_URL \
            --repo ${{ github.repository }}

      - name: Sync Supabase Anon Key
        if: contains(github.event.inputs.secrets_to_sync || 'all', 'supabase') || contains(github.event.inputs.secrets_to_sync || 'all', 'all')
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_PAT_SECRETS_WRITE }}
        run: |
          chmod +x ./scripts/sync_1password_item_to_github.sh
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "${{ vars.OP_ITEM_SUPABASE_ANON_KEY || 'GITHUB - SUPABASE_ANON_KEY' }}" \
            --field notesPlain \
            --secret-name SUPABASE_ANON_KEY \
            --repo ${{ github.repository }}
      
      - name: Sync Mailgun API Key
        if: contains(github.event.inputs.secrets_to_sync || 'all', 'mailgun') || contains(github.event.inputs.secrets_to_sync || 'all', 'all')
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_PAT_SECRETS_WRITE }}
        run: |
          chmod +x ./scripts/sync_1password_item_to_github.sh
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "${{ vars.OP_ITEM_MAILGUN_API || 'GITHUB - MAILGUN_API_KEY' }}" \
            --field notesPlain \
            --secret-name MAILGUN_API_KEY \
            --repo ${{ github.repository }}

      - name: Sync Mercado Pago tokens
        if: contains(github.event.inputs.secrets_to_sync || 'all', 'mercadopago') || contains(github.event.inputs.secrets_to_sync || 'all', 'all')
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_PAT_SECRETS_WRITE }}
        run: |
          chmod +x ./scripts/sync_1password_item_to_github.sh
          # Access Token
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "${{ vars.OP_ITEM_MP_ACCESS_TOKEN || 'GITHUB - MP_ACCESS_TOKEN' }}" \
            --field notesPlain \
            --secret-name MP_ACCESS_TOKEN \
            --repo ${{ github.repository }}
          # Client ID
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "${{ vars.OP_ITEM_MP_CLIENT_ID || 'GITHUB - MP_CLIENT_ID' }}" \
            --field notesPlain \
            --secret-name MP_CLIENT_ID \
            --repo ${{ github.repository }}
          # Client Secret
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "${{ vars.OP_ITEM_MP_CLIENT_SECRET || 'GITHUB - MP_CLIENT_SECRET' }}" \
            --field notesPlain \
            --secret-name MP_CLIENT_SECRET \
            --repo ${{ github.repository }}
          # Public Key
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "${{ vars.OP_ITEM_MP_PUBLIC_KEY || 'GITHUB - MP_PUBLIC_KEY' }}" \
            --field notesPlain \
            --secret-name MP_PUBLIC_KEY \
            --repo ${{ github.repository }}
          # Webhook Secret
          ./scripts/sync_1password_item_to_github.sh \
            --item-id "${{ vars.OP_ITEM_MP_WEBHOOK_SECRET || 'GITHUB - MP_WEBHOOK_SECRET' }}" \
            --field notesPlain \
            --secret-name MP_WEBHOOK_SECRET \
            --repo ${{ github.repository }}
      
      - name: Summary
        if: always()
        run: |
          echo "## Secrets Rotation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Render API Key**: Synced ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Supabase Key**: Pending configuration ⚠️" >> $GITHUB_STEP_SUMMARY
          echo "- **Mailgun Key**: Pending configuration ⚠️" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Add Supabase and Mailgun keys to 1Password vault '$VAULT'" >> $GITHUB_STEP_SUMMARY
          echo "2. Uncomment sync steps in this workflow" >> $GITHUB_STEP_SUMMARY
          echo "3. Create OP_SERVICE_ACCOUNT_TOKEN secret for unattended access" >> $GITHUB_STEP_SUMMARY
